name: Init Repository and Resolve Dynamic Template
on:
  create

jobs:
  init_repo:
    name: Init Repository
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      # Need the secret token (ok in organization if global secret, if not need the repo tool)
      - name: "TestSpace  Project Creation"
        run: |
          http_response=$(curl -o response.txt -w "%{response_code}" --no-progress-meter -X GET -H "Authorization: Token ${{ secrets.TESTSPACE_TOKEN }}" "https://${{ github.repository_owner }}.testspace.com/api/projects")
          if [ $http_response != "200" ]; then
            echo -e "${cRED}FATAL: Error when trying to get project list from testspace (${http_response}).${cSTOP}"
            cat response.txt
            exit 1
          fi
          found=$(jq ".[] | select(.source_repo_url==\"https://github.com/${{ github.repository }}\")" response.txt)
          if [[ -z "$found" ]]; then
            echo -e "${cGREEN}TestSpace Project is going to be created.${cSTOP}"
            http_response=$(curl -o response.txt -w "%{response_code}" --no-progress-meter -X POST \
              -H "Authorization: Token ${{ secrets.TESTSPACE_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data '{"name":"'"${GITHUB_REPOSITORY/\//:}"'", "source_repo": "github:${{ github.repository }}", "is_private": false}' \
              "https://${{ github.repository_owner }}.testspace.com/api/projects")
            if [ $http_response != "201" ]; then
              echo -e "${cRED}FATAL: Error when trying to create project on testspace (${http_response}).${cSTOP}"
              cat response.txt
              exit 1
            fi
            testspace_project_id=$(jq '.id' response.txt)
            testspace_project_name=$(jq '.name' response.txt)
            echo -e "${cGREEN}The TestSpace Project $testspace_project_name was created with id $testspace_project_id.${cSTOP}"
          else
            testspace_project_id=$(jq '.id' <<< $found)
            testspace_project_name=$(jq '.name' <<< $found)
            echo -e "${cBLUE}The TestSpace Project $testspace_project_name already exits with id $testspace_project_id.${cSTOP}"
          fi
          echo "TESTSPACE_SPACE_ID=${testspace_project_id}" >> $GITHUB_ENV

      # Can be done in all the case, but not if we need variable (at this is my case)
      # in this case, global org var is ok or need a repo tool
      - name: "Manage Dynamic Template"
        # if already done (we are in a replay case on a latter failure for example)
        if: hashFiles('README.md.j2') != ''
        # need write permission on the token (not the case by default on organization)
        run: |
          pip install jinja2-cli
          jinja2 package.json.j2 > package.json
          rm package.json.j2
          jinja2 package-lock.json.j2 > package-lock.json
          rm package-lock.json.j2
          jinja2 README.md.j2 > README.md
          rm README.md.j2
          jinja2 ./.github/DevSecOps.md.j2 > ./.github/DevSecOps.md
          rm ./.github/DevSecOps.md.j2
          rm ./.github/workflows/init_repo.yml
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git config user.name "${{ github.actor }}"
          git add .
          git commit -m "Dynamic Template Substitution [skip ci]"
          git push
        env:
          CI_REPORT_REPO_PATH: ${{ vars.ci_report_repo_path }}

      - name: Create develop Branch
        # need write permission on the token (not the case by default on organization)
        run: |
          git checkout -b develop
          git push origin develop

      # For organization, can also be done at organization level before
      # If not organization, need the secrets PAT, so need repo tool
      - name: Define Branch Protection
        run: |
          gh api "repos/${{ github.repository }}/branches/main/protection" --method PUT --input ./.github/workflows/init/branch_protection.json
          gh api "repos/${{ github.repository }}/branches/develop/protection" --method PUT --input ./.github/workflows/init/branch_protection.json
        env:
          GH_TOKEN: ${{ secrets.PAT_DYNAMIC_TEMPLATE }}
      
      # For organization, can also be done at organization level before (one private key for the all organization)
      # If not organization, need the secrets PAT, so need repo tool
      - name: "Manage cnx to internal ${{ vars.ci_report_repo_path }} repo"
        run: |
          ssh-keygen -t rsa -b 4096 -C "Deployement to ${{ vars.ci_report_repo_path }}" -f key -N ""
          gh secret set DEPLOY_CI_REPORT_KEY --repo ${{ github.repository }} < key
          existing_id=$(gh repo deploy-key list --repo ${{ vars.ci_report_repo_path }} --json id,title --jq ".[] | select(.title | contains(\"${{ github.repository }}\")) | .id")
          if [[ -n $existing_id ]]; then # Si la clé est déjà définie
            echo -e "${cBLUE}The Public Key for ${{ github.repository }} already exist in ${{ vars.ci_report_repo_path }}, we delete it.${cSTOP}"
            gh repo deploy-key delete $existing_id --repo ${{ vars.ci_report_repo_path }}
          fi
          echo -e "${cGREEN}Save Public Key in $CI_REPORT_PROJECT_PATH.${cSTOP}"
          gh repo deploy-key add key.pub --repo ${{ vars.ci_report_repo_path }} --allow-write --title "Publication pour ${{ github.repository }}"
        env:
          GH_TOKEN: ${{ secrets.PAT_DYNAMIC_TEMPLATE }}

